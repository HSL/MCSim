#------------------------------------------------------------------------------
# pde1.model
#
# Flux-conservative equation; partial differential equations model
# solved using the grid method. Time is the first (implicit) dimension. 
# The second dimension is in X.
#
# Copyright (c) 1993-2008 Free Software Foundation, Inc.
#------------------------------------------------------------------------------

States = {y_x_0,  y_x_1,  y_x_2,  y_x_3,  y_x_4,  y_x_5,  y_x_6,  y_x_7, 
          y_x_8,  y_x_9,  y_x_10, y_x_11, y_x_12, y_x_13, y_x_14, y_x_15, 
          y_x_16, y_x_17, y_x_18, y_x_19};

# Model Parameters
k = 0.1;
delta_x = 0.5;

Dynamics { 

  dt(y_x_0) = -k * ((y_x_1 - y_x_0) / delta_x);

  dt(y_x_1)  = -k * ((y_x_2  - y_x_0)  / (2 * delta_x));
  dt(y_x_2)  = -k * ((y_x_3  - y_x_1)  / (2 * delta_x));
  dt(y_x_3)  = -k * ((y_x_4  - y_x_2)  / (2 * delta_x));
  dt(y_x_4)  = -k * ((y_x_5  - y_x_3)  / (2 * delta_x));
  dt(y_x_5)  = -k * ((y_x_6  - y_x_4)  / (2 * delta_x));
  dt(y_x_6)  = -k * ((y_x_7  - y_x_5)  / (2 * delta_x));
  dt(y_x_7)  = -k * ((y_x_8  - y_x_6)  / (2 * delta_x));
  dt(y_x_8)  = -k * ((y_x_9  - y_x_7)  / (2 * delta_x));
  dt(y_x_9)  = -k * ((y_x_10 - y_x_8)  / (2 * delta_x));
  dt(y_x_10) = -k * ((y_x_11 - y_x_9)  / (2 * delta_x));
  dt(y_x_11) = -k * ((y_x_12 - y_x_10) / (2 * delta_x));
  dt(y_x_12) = -k * ((y_x_13 - y_x_11) / (2 * delta_x));
  dt(y_x_13) = -k * ((y_x_14 - y_x_12) / (2 * delta_x));
  dt(y_x_14) = -k * ((y_x_15 - y_x_13) / (2 * delta_x));
  dt(y_x_15) = -k * ((y_x_16 - y_x_14) / (2 * delta_x));
  dt(y_x_16) = -k * ((y_x_17 - y_x_15) / (2 * delta_x));
  dt(y_x_17) = -k * ((y_x_18 - y_x_16) / (2 * delta_x));
  dt(y_x_18) = -k * ((y_x_19 - y_x_17) / (2 * delta_x));

  dt(y_x_19) = -k * ((y_x_19 - y_x_18) / delta_x);

}

End.
